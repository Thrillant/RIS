clear; clc;
%% Parameters
fc = 28e9;                   % Carrier frequency (Hz)
c = physconst('Lightspeed'); % Speed of light (m/s)
lambda = c / fc;             % Wavelength (m)
fs = 10e6;                   % Sample rate (Hz)
numSymbols = 1000;           % Number of symbols per user
rng(2023);                   % For reproducibility
%% Rician fading parameters
K_dB = 10;                   % Rician K-factor in dB (strong LOS)
K = 10^(K_dB / 10);          % Linear scale
%% RIS Setup
Nr = 15; Nc = 15;                                    % RIS dimensions
dr = 0.5 * lambda; dc = 0.5 * lambda;                % RIS element spacing (half wavelength)
ris = phased.RectangularRIS('Size', [Nr Nc], ...
    'Spacing', [dr dc], ...
    'UnitCell', phased.IsotropicAntennaElement);
numRIS = Nr * Nc;                                    % Total RIS elements
%% Base Station Setup (URA with 4 elements)
numTx = 4;
bsPos = [0; 0; 30];                                  % BS at origin with antenna height 30m
bsArray = phased.URA('Size', [2 2], ...
    'ElementSpacing', [0.5*lambda 0.5*lambda], ...
    'Element', phased.IsotropicAntennaElement);
bsElementPos = getElementPosition(bsArray);         % 3 x numTx
bsAbsElementPos = bsPos + bsElementPos;              % Absolute positions of BS antennas
%% User Equipments Positions (vertical alignment)
numUE = 3;
pos_ue = [1000 * ones(1, numUE); zeros(1, numUE); [2 12 22]]; % 3 x numUE
% For storing results: (10 RIS locations) x (1, for mean combined SNR)
RIS_x_vals = 50:100:950;      % 10 values: 50, 150, ..., 950
results_CombinedSNR = zeros(length(RIS_x_vals), 1);
for idx = 1:length(RIS_x_vals)
    %% RIS Position (update x)
    pos_ris = [RIS_x_vals(idx); 0; 20];    
    %% Generate random BPSK symbols for each UE
    data = 2 * randi([0 1], numSymbols, numUE) - 1;     % Symbols in {-1, +1}
    
    %% Define Rician Channel Objects for BS→RIS and RIS→UE
    chanAPToRIS = comm.RicianChannel( ...
        'SampleRate', fs, ...
        'KFactor', K_dB, ...
        'PathDelays', 0, ...
        'AveragePathGains', 0, ...
        'DirectPathDopplerShift', 0, ...
        'MaximumDopplerShift', 0);
    chanRISToUE = comm.RicianChannel( ...
        'SampleRate', fs, ...
        'KFactor', K_dB, ...
        'PathDelays', 0, ...
        'AveragePathGains', 0, ...
        'DirectPathDopplerShift', 0, ...
        'MaximumDopplerShift', 0);
    %% Steering vectors for RIS & BS
    stv_ris = phased.SteeringVector('SensorArray', ris);
    stv_bs  = phased.SteeringVector('SensorArray', bsArray);
    %% Calculate RIS absolute element positions
    rowIndices = (-(Nr-1)/2:(Nr-1)/2) * dr;
    colIndices = (-(Nc-1)/2:(Nc-1)/2) * dc;
    [Y, Z] = meshgrid(rowIndices, colIndices);
    risElementPos = [pos_ris(1) * ones(1, numRIS);
                     reshape(Y, 1, []);
                     reshape(Z, 1, [])];                  % 3 x numRIS
    %% Free-space path loss (dB)
    fspl_db = @(d, lambda) 20 * log10(4 * pi * d / lambda);
    %% Construct channel matrix H incorporating RIS reflection and Rician fading
    H = zeros(numUE, numTx); % Channel matrix
    RIS_phase_coeffs = cell(1, numUE);  % RIS phase coefficients per UE
    for k = 1:numUE
        uePos = pos_ue(:, k);
        % RIS to UE channel vector hr (numRIS x 1)
        dist_ris_ue   = vecnorm(risElementPos - uePos, 2, 1);                
        pathloss_ris_ue = db2mag(-fspl_db(dist_ris_ue, lambda));           
        phase_ris_ue    = exp(1i * 2 * pi * dist_ris_ue / lambda);            
        [~, ang_ris_ue] = rangeangle(pos_ris, uePos);
        sv_ris_ue = stv_ris(fc, ang_ris_ue);                              % numRIS x 1
        hr_los = (pathloss_ris_ue(:)) .* (phase_ris_ue(:)) .* sv_ris_ue;  % numRIS x 1
        hr = sqrt(K/(K + 1)) * hr_los + sqrt(1/(K + 1))*(randn(numRIS,1) + 1i*randn(numRIS,1))/sqrt(2);
        % BS to RIS channel matrix g (numRIS x numTx)
        g = zeros(numRIS, numTx);
        for m = 1:numTx
            txPos = bsAbsElementPos(:, m);
            dist_bs_ris = vecnorm(risElementPos - txPos, 2, 1);                
            pathloss_bs_ris = db2mag(-fspl_db(dist_bs_ris, lambda));           
            phase_bs_ris    = exp(1i * 2 * pi * dist_bs_ris / lambda);            
            [~, ang_bs_ris] = rangeangle(txPos, pos_ris);
            sv_bs_ris = stv_ris(fc, ang_bs_ris);                             % numRIS x 1
            g_los = (pathloss_bs_ris(:)) .* (phase_bs_ris(:)) .* sv_bs_ris;  % numRIS x 1
            g(:, m) = sqrt(K/(K + 1)) * g_los + sqrt(1/(K + 1))*(randn(numRIS,1) + 1i*randn(numRIS,1))/sqrt(2);
        end
        
        % Direct BS-UE path hd (scalar)
        dist_bs_ue = norm(bsPos - uePos);
        pathloss_bs_ue = db2mag(-fspl_db(dist_bs_ue, lambda));
        phase_bs_ue = exp(1i * 2 * pi * dist_bs_ue / lambda);
        hd_los = pathloss_bs_ue * phase_bs_ue;
        hd = sqrt(K/(K + 1)) * hd_los + sqrt(1/(K + 1))*(randn + 1i*randn)/sqrt(2);
        % RIS reflection coefficients: phase alignment
        sum_g = sum(g, 2);
        rcoeff_ris = exp(1i * (angle(hd) - angle(hr) - angle(sum_g)));
        % Effective channel for UE k
        H(k, :) = hr' * diag(rcoeff_ris) * g + hd;
        % Store for precoding
        RIS_phase_coeffs{k} = rcoeff_ris;
    end
    %% Zero-Forcing Precoding
    W = pinv(H);  % numTx x numUE precoding matrix
    %% Set transmit power (500 mW)
    Ptx = 0.5;   % Watts
    x_precoded = sqrt(Ptx) * data * W.';  % numSymbols x numTx
    %% RIS Reflector object
    risreflector = phased.RISReflector('Surface', ris, 'OperatingFrequency', fc);
    %% Initialize received signals for LOS-only, RIS-only and combined paths
    y_UE_LOS = zeros(numSymbols, numUE);
    y_UE_RIS = zeros(numSymbols, numUE);
    y_UE_Combined = zeros(numSymbols, numUE);
    for k = 1:numUE
        uePos_k = pos_ue(:, k);
        rx_LOS = zeros(numSymbols, 1);
        rx_RIS = zeros(numSymbols, 1);
        rx_Comb = zeros(numSymbols, 1);
        for m = 1:numTx
            xi = x_precoded(:, m);
            txPos = bsAbsElementPos(:, m);
            
            % LOS only path
            dist_bs_ue = norm(bsPos - uePos_k);
            pathloss_bs_ue = db2mag(-fspl_db(dist_bs_ue, lambda));
            phase_bs_ue = exp(1i * 2 * pi * dist_bs_ue / lambda);
            hd_los = pathloss_bs_ue * phase_bs_ue;
            rx_LOS = rx_LOS + xi * hd_los;
            % RIS only path
            x_ris_in = chanAPToRIS(xi);
            [~, ang_ap_ris] = rangeangle(txPos, pos_ris);
            [~, ang_ue_ris] = rangeangle(uePos_k, pos_ris);
            rcoeff_this = RIS_phase_coeffs{k};
            x_ris_out = risreflector(x_ris_in, ang_ap_ris, ang_ue_ris, rcoeff_this);
            rx_sig = chanRISToUE(x_ris_out);
            rx_RIS = rx_RIS + rx_sig;
            % Combined path
            rx_Comb = rx_Comb + xi * hd_los + rx_sig;
        end
        y_UE_LOS(:, k)       = rx_LOS;
        y_UE_RIS(:, k)       = rx_RIS;
        y_UE_Combined(:, k)  = rx_Comb;
    end
    %% Noise power (in dBW); adjust to get RIS SNR around 20-30 dB
    N0dB = -10; % You can tune this (e.g., between -15 and -5)
    noisePower = 10^(N0dB / 10);
    noise_LOS = sqrt(noisePower/2) * (randn(size(y_UE_LOS)) + 1i*randn(size(y_UE_LOS)));
    noise_RIS = sqrt(noisePower/2) * (randn(size(y_UE_RIS)) + 1i*randn(size(y_UE_RIS)));
    noise_Combined = sqrt(noisePower/2) * (randn(size(y_UE_Combined)) + 1i*randn(size(y_UE_Combined)));
    y_UE_LOS_noisy = y_UE_LOS + noise_LOS;
    y_UE_RIS_noisy = y_UE_RIS + noise_RIS;
    y_UE_Combined_noisy = y_UE_Combined + noise_Combined;
    %% Compute and save mean Combined SNR over users for this RIS position
    snr_Comb_vals = zeros(numUE, 1);
    for k = 1:numUE
        sig_Comb = bandpower(y_UE_Combined(:, k));
        noise_Comb_pow = bandpower(noise_Combined(:, k));
        snr_Comb = 10 * log10(sig_Comb / noise_Comb_pow);
        snr_Comb_vals(k) = snr_Comb;
    end
    results_CombinedSNR(idx) = mean(snr_Comb_vals);
    % Print results
    fprintf('\n== RIS at x = %d m ==\n', RIS_x_vals(idx));
    for k = 1:numUE
        fprintf('UE %d (height %.1fm): Combined SNR = %.2f dB\n', k, pos_ue(3, k), snr_Comb_vals(k));
    end
end
% Plot only the combined SNR
figure;
plot(RIS_x_vals, results_CombinedSNR, '-o', 'LineWidth', 2, 'MarkerFaceColor', 'g');
xlabel('RIS x-position (m)');
ylabel('Average Combined SNR over UEs (dB)');
title('Mean Combined SNR vs. RIS x-position');
grid on;
